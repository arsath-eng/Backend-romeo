doctype html
html
  head
    title Weekly Summary
    style.
      p {
        margin: 0;
      }
      .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        line-height: .8;
      }

      .header p {
        font-size: 18px;
        font-weight: 700;
        margin: 10px 0 20px;
      }

      .header span {
        font-size: 14px;
        font-weight: 500;
        color:rgb(0, 0, 0);
      }

      .logo {
        width: 150px;
      }
      body {
        font-family: system-ui, sans-serif;
        color: #333;
        background-color: #fff;
      }

      table {
        width: 100%;
        border-collapse: collapse;
      }

      th, td {
        border: 1px solid #ccc;
        padding: 4px;
        text-align: center;
        font-size: 10px;
      }

      th[colspan="8"] {
        background-color: #f0f0f0;
        font-size: 10px;
        text-align: left;
      }

      th.left,
      td.left {
        text-align: left;
      }

      .employee-name {
        font-weight: bold;
        font-size: 10px;
        display: block;
      }

      .employee-meta {
        color: #706768;
        font-weight: 500;
        font-size:10px;
        display: block;
      }
      .week-label {
        font-weight: bold;
        color: #555;
      }
      .total_row {
        background-color: #f0f0f0;
        font-weight: bold;
      }

  body
    .header
        - const company = details || []
        - var companyname = company.companyName
        - var companyaddress = `${company.companyAddress.no} ${company.companyAddress.street}`
        - var companycountry = `${company.companyAddress.country}`
        - var companyLogo = company.companyLogo 
        p="Attendace Summary Report"
          br
          br
          span= companyname
          br
          - const firstWeek = Object.keys(details.summary[0].logs.reduce((acc, log) => (acc[log.week] = true, acc), {}))[0]
          - const lastWeek = Object.keys(details.summary[0].logs.reduce((acc, log) => (acc[log.week] = true, acc), {})).slice(-1)[0]
          - const formatDate = d => {
            -  const months = ['Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec']
            -  const date = new Date(d)
            -  const day = date.getDate()
            -  const suffix = (day % 10 === 1 && day !== 11) ? 'st' : (day % 10 === 2 && day !== 12) ? 'nd' : (day % 10 === 3 && day !== 13) ? 'rd' : 'th'
            -  return `${day}${suffix} ${months[date.getMonth()]} ${date.getFullYear()}`
          -  }
          - const periodText = `For the period of ${formatDate(firstWeek.split(' to ')[0])} to ${formatDate(lastWeek.split(' to ')[1])}`
          span= periodText

        img.logo(src=companyLogo alt="company-image")
    

    - // Collect all weeks (unique) from the whole report
    - let allWeeks = []
    - details.summary.forEach(employee => {
    -   employee.logs.forEach(log => {
    -     if (!allWeeks.includes(log.week)) allWeeks.push(log.week)
    -   })
    - })

    - // Sort weeks by start date ascending
    - allWeeks.sort((a,b) => new Date(a.split(' to ')[0]) - new Date(b.split(' to ')[0]))

    table
      // Header row: Week 1, Week 2, ...
      tr.total_row
        th.left Employee Name
        each week, i in allWeeks
          th(colspan=7)= `Week ${i+1}`

      // Sub-header row: Dates for each week
      tr.total_row
        th.left
        each week in allWeeks
          - let [startStr, endStr] = week.split(' to ')
          - let start = new Date(startStr)
          - let dates = []
          - for(let d = new Date(start); d <= new Date(endStr); d.setDate(d.getDate()+1)) {
          -   dates.push(new Date(d).toISOString().slice(0,10))
          - }
          each date in dates
            - let day = new Date(date).getDay()
            - const days = ['Sun','Mon','Tue','Wed','Thu','Fri','Sat']
            th
              | #{days[day]}
              br
              | #{new Date(date).getDate()}

            

      // Employee data rows
      each employee in details.summary
        tr
          th.left
            span.employee-name= employee.employee_name
            span.employee-meta= `${employee.role} | ${employee.department}`

          each week in allWeeks
            - let log = employee.logs.find(l => l.week === week)
            - let dateMap = {}
            - if (log) {
            -   log.daily_log.forEach(l => {
            -     const date = new Date(l.date)
            -     const day = date.getDay()
            -     const adjustedDay = (day + 6) % 7 // Monday=0...Sunday=6
            -     dateMap[l.date] = l
            -   })
            - }

            - let [startStr, endStr] = week.split(' to ')
            - let start = new Date(startStr)
            - let dates = []
            - for(let d = new Date(start); d <= new Date(endStr); d.setDate(d.getDate()+1)) {
            -   dates.push(new Date(d).toISOString().slice(0,10))
            - }

            each date in dates
              - const entry = dateMap[date]
              if entry
                - const inTime = entry.clock_in || '-'
                - const outTime = entry.clock_out || '-'
                td= `${inTime} - ${outTime}`
              else
                td -


